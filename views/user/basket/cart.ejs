<%- include("../../views/partials/user/header.ejs") %>

<!-- Bootstrap 5 CDN (CSS) for additional styling -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<!-- Font Awesome -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
<!-- SweetAlert2 CDN -->
<link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<style>
  .quantity .pro-qty-3 {
    display: flex;
    align-items: center;
  }
  .quantity .pro-qty-3 .qtybtn {
    background: #FFB22C; /* Golden Yellow */
    border: none;
    padding: 5px 10px;
    cursor: pointer;
    color: #000000; /* Black text */
  }
  .quantity .pro-qty-3 input {
    width: 50px;
    text-align: center;
    border: 1px solid #854836; /* Brown border */
    background: #F7F7F7; /* Light Gray */
    color: #000000; /* Black text */
  }
  .cart__close {
    cursor: pointer;
    color: #854836; /* Brown */
  }
  .cart__close:hover {
    color: #FFB22C; /* Golden Yellow */
  }
  .primary-btn, .continue__btn a, .update__btn a {
    background: #FFB22C; /* Golden Yellow */
    color: #000000; /* Black text */
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    transition: background 0.3s ease;
  }
  .primary-btn:hover, .continue__btn a:hover, .update__btn a:hover {
    background: #e59f25; /* Darker Golden Yellow */
    color: #000000;
    text-decoration: none;
  }
  .cart__discount button {
    background: #854836; /* Brown */
    color: #F7F7F7; /* Light Gray text */
    border: none;
    padding: 5px 15px;
    border-radius: 5px;
  }
  .cart__discount button:hover {
    background: #6b3a2c; /* Darker Brown */
  }
</style>
<style>
  .applied-coupon {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: #f5f5f5;
    padding: 8px 12px;
    border-radius: 4px;
    margin-top: 10px;
  }
  
  .coupon-code {
    font-weight: bold;
    margin-right: 10px;
  }
  
  .coupon-discount {
    color: #28a745;
  }
  
  .remove-coupon-btn {
    background: none;
    color: #dc3545;
    border: none;
    cursor: pointer;
    font-size: 14px;
    padding: 0;
    text-decoration: underline;
  }
  
  .coupon-info {
    display: flex;
    flex-direction: column;
  }
  
  .coupon-notification {
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 15px;
    background-color: #fff;
    border-left: 4px solid;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    z-index: 1000;
    transition: all 0.3s ease;
    opacity: 0;
  }
  
  .coupon-notification.success {
    border-left-color: #28a745;
  }
  
  .coupon-notification.error {
    border-left-color: #dc3545;
  }
  
  .coupon-notification.show {
    opacity: 1;
  }
  a{
    text-decoration: none;  
  }
  .old-price {
  text-decoration: line-through;
  color: #888;
  margin-right: 8px;
  font-size: 14px;
  font-weight: normal;
}
</style>
<!-- Breadcrumb Section Begin -->
<section class="breadcrumb-option">
  <div class="container">
    <div class="row">
      <div class="col-lg-12">
        <div class="breadcrumb__text">
          <h4>Shopping Cart</h4>
          <div class="breadcrumb__links">
            <a href="/">Home</a>
            <a href="/shop">Shop</a>
            <span>Shopping Cart</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
<!-- Breadcrumb Section End -->

<!-- Shopping Cart Section Begin -->
<section class="shopping-cart spad">
  <div class="container">
    <div class="row">
      <div class="col-lg-8">
        <div class="shopping__cart__table">
          <table>
            <thead>
              <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Total</th>
                <th></th>
              </tr>
            </thead>
            <tbody>
              <% if (cart && cart.items && cart.items.length > 0) { %>
                <% cart.items.forEach(item => { %>
                  <tr data-variant-id="<%= item.variant._id %>">
                    <td class="product__cart__item">
                      <div class="product__cart__item__pic">
                        <img src="<%= item.variant.product_image[0] || '/img/shopping-cart/default.jpg' %>" alt="<%= item.product.name %>" style="width: 90px;">
                      </div>
                      <div class="product__cart__item__text">
                        <h6><%= item.product.name %> - <%= item.variant.color %> <%= item.variant.size %></h6>
                       
                        <h5>₹<%= item.variant.sale_price.toFixed(2) %>
                          <% if (item.variant.sale_price !== item.variant.price ) { %>
                            <span class="old-price">₹<%= item.variant.price.toFixed(2) %></span>
                            
                          <% }%>
                        </h5>
                        
                         
                      </div>
                    </td>
                    <td class="quantity__item">
                      <div class="quantity">
                        <div class="pro-qty-3">
                          <button class="qtybtn dec">-</button>
                          <input type="text" value="<%= item.quantity %>" data-max="<%= item.variant.quantity %>">
                          <button class="qtybtn inc">+</button>
                        </div>
                      </div>
                    </td>
                    <td class="cart__price">₹<%= (item.variant.sale_price * item.quantity).toFixed(2) %></td>
                    <td class="cart__close"><i class="fa fa-close"></i></td>
                  </tr>
                <% }) %>
              <% } else { %>
                <tr>
                  <td colspan="4" class="text-center">Your cart is empty.</td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
        <div class="row">
          <div class="col-lg-6 col-md-6 col-sm-6">
            <div class="continue__btn">
              <a href="/shop">Continue Shopping</a>
            </div>
          </div>
         
        </div>
      </div>
      <div class="col-lg-4">
  
        
        <div class="cart__total">
          <h6>Cart total</h6>
          <ul>
            <li>Subtotal <span class="cart-subtotal">₹<%= cart && cart.subtotal ? cart.subtotal.toFixed(2) : '0.00' %></span></li>
            <% if (cart && cart.coupon_applied && cart.coupon_applied.discount) { %>
              <li class="discount-row">Discount (<%= cart.coupon_applied.code %>)
                <span class="cart-discount">- ₹<%= !isNaN(cart.coupon_applied.discount) ? cart.coupon_applied.discount.toFixed(2) : '0.00' %></span>
              </li>
            <% } %>
            <li>Total <span class="cart-total">₹<%= cart && cart.total ? cart.total.toFixed(2) : '0.00' %></span></li>
          </ul>
          <% if (cart && cart.total && cart.total >= 1000) { %>
            <div class="alert alert-success mt-3" role="alert">
              You are eligible for <strong>Free Delivery</strong>!
            </div>
          <% } %>
          
          <% if (cart && cart.items && cart.items.length > 0) { %>
            <a href="/checkout" class="primary-btn">Proceed to checkout</a>
          <% } else { %>
            <a href="/shop" class="primary-btn">Continue shopping</a>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</section>
<!-- Shopping Cart Section End -->
<!-- Related Section Begin -->
 <%if(relatedProducts){%>

 
<section class="related spad">
  <div class="container">
    <div class="row">
      <div class="col-lg-12">
        <h3 class="related-title">Related Products</h3>
      </div>
    </div>
    <div class="row">
      <% if (relatedProducts && relatedProducts.length > 0) { %> <%
      relatedProducts.forEach((relatedProduct, index) => { %> <% const
      relatedVariant = relatedProduct.variants[0];  %>
      <div class="col-lg-3 col-md-6 col-sm-6">
        <div class="product__item">
          <div
            class="product__item__pic set-bg"
            data-setbg="<%= relatedVariant.product_image && relatedVariant.product_image.length > 0 ? relatedVariant.product_image[0] : 'https://placehold.co/400x600?text=Add+image' %>"
          >
            <% if (index === 0) { %>
            <span class="label">New</span>
            <% } %>
            <ul class="product__hover">
              <li>
                <a 
              href="#"
              class="add-to-wishlist"
                data-product-id="<%= relatedProduct._id %>"
                data-variant-id="<%= relatedVariant._id %>"
              >
                  <img src="/img/icon/heart.png" alt="Wishlist" /></a>
              </li>
              <li>
                <a href="#"
                  ><img src="/img/icon/compare.png" alt="Compare" />
                  <span>Compare</span></a
                >
              </li>
              <li>
                <a href="/product/<%= relatedProduct._id %>"
                  ><img src="/img/icon/search.png" alt="View"
                /></a>
              </li>
            </ul>
          </div>
          <div class="product__item__text">
            <h6>
              <%= relatedProduct.name %>
            </h6>
            <a
              href="#"
              class="add-cart"
              data-product-id="<%= relatedProduct._id %>"
              data-variant-id="<%= relatedVariant._id %>"
              >+ Add To Cart</a
            >
            <div class="rating">
              <% const relatedAvgRating = relatedProduct.reviews ?
              (relatedProduct.reviews.reduce((sum, r) => sum + r.rating, 0) /
              relatedProduct.reviews.length).toFixed(1) : 0; %> <% for(let i =
              1; i <= 5; i++) { %>
              <i
                class="fa <%= i <= relatedAvgRating ? 'fa-star' : 'fa-star-o' %>"
              ></i>
              <% } %>
            </div>
            <h5>
              ₹<%= relatedVariant.sale_price %> 
            </h5>
            <div class="product__color__select">
              <% relatedProduct.variants.slice(0, 3).forEach((variant,
              colorIndex) => { %>
              <label
                class="<%= colorIndex === 0 ? 'active' : '' %>"
                for="pc-<%= relatedProduct._id %>-<%= colorIndex %>"
              >
                <input
                  type="radio"
                  id="pc-<%= relatedProduct._id %>-<%= colorIndex %>"
                  name="color-<%= relatedProduct._id %>"
                />
              </label>
              <% }) %>
            </div>
          </div>
        </div>
      </div>
      <% }) %> <% } else { %>
      <div class="col-lg-12">
        <p>No related products found.</p>
      </div>
      <% } %>
    </div>
  </div>
</section>
<% }%>
<!-- Related Section End -->
<!-- SweetAlert2 JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>

<script>
  $(document).ready(function() {
    // Show loading indicator
    function showLoading() {
      const loadingToast = Swal.mixin({
        toast: true,
        position: 'top-end',
        showConfirmButton: false
      });
      
      loadingToast.fire({
        icon: 'info',
        title: 'Updating cart...',
        timer: 1000
      });
    }
    
    $('.pro-qty-3 .qtybtn').on('click', function() {
  const $input = $(this).siblings('input');
  const $row = $(this).closest('tr');
  let qty = parseInt($input.val());
  const inventoryMax = parseInt($input.data('max'));
  // Set maximum to 5 or inventory max, whichever is smaller
  const max = Math.min(5, inventoryMax);

  if ($(this).hasClass('inc')) {
    if (qty < max) {
      qty += 1;
      $input.val(qty);
      updateCartItemOnServer($row, qty);
    } else {
      // Optional: Show a message that max quantity reached
      const Toast = Swal.mixin({
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true
      });
      
      Toast.fire({
        icon: 'warning',
        title: 'Maximum quantity reached'
      });
    }
  } else if ($(this).hasClass('dec')) {
    if (qty > 1) {
      qty -= 1;
      $input.val(qty);
      updateCartItemOnServer($row, qty);
    }
  }

  updateCartItemDisplay($row);
});

// Also modify the direct input handler to respect the same limit
$('.pro-qty-3 input').on('change', function() {
  const $input = $(this);
  const $row = $(this).closest('tr');
  let qty = parseInt($input.val());
  const inventoryMax = parseInt($input.data('max'));
  // Set maximum to 5 or inventory max, whichever is smaller
  const max = Math.min(5, inventoryMax);
  
  // Validate input
  if (isNaN(qty) || qty < 1) {
    qty = 1;
  } else if (qty > max) {
    qty = max;
    // Optional: Show a message that max quantity reached
    const Toast = Swal.mixin({
      toast: true,
      position: 'top-end',
      showConfirmButton: false,
      timer: 3000,
      timerProgressBar: true
    });
    
    Toast.fire({
      icon: 'warning',
      title: 'Maximum quantity limited to ' + max
    });
  }
  
  $input.val(qty);
  updateCartItemOnServer($row, qty);
  updateCartItemDisplay($row);
});

    // Remove item with auto-update
    $('.cart__close').on('click', function() {
      const $row = $(this).closest('tr');
      const variantId = $row.data('variant-id');

      Swal.fire({
        title: 'Remove Item?',
        text: 'Are you sure you want to remove this item from your cart?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#FFB22C',
        cancelButtonColor: '#854836'
      }).then((result) => {
        if (result.isConfirmed) {
          showLoading();
          
          $.ajax({
            type: 'DELETE',
            url: '/cart',
            data: { variantId: variantId },
            success: function(response) {
              if (response.success) {
                $row.remove();
                updateCartSummary(response.cart);
                if ($('tbody tr').length === 0) {
                  $('tbody').html('<tr><td colspan="4" class="text-center">Your cart is empty.</td></tr>');
                }
                
                // Success notification
                const Toast = Swal.mixin({
                  toast: true,
                  position: 'top-end',
                  showConfirmButton: false,
                  timer: 3000,
                  timerProgressBar: true
                });
                
                Toast.fire({
                  icon: 'success',
                  title: 'Item removed from cart'
                });
              }
            },
            error: function(xhr, status, error) {
              console.error('Error removing item:', error);
              Swal.fire({
                icon: 'error',
                title: 'Remove Failed',
                text: 'An error occurred while removing the item.',
                confirmButtonColor: '#FFB22C'
              });
            }
          });
        }
      });
    });

    // Keep update cart button for manual updates if needed
    $('#updateCart').on('click', function(e) {
      e.preventDefault();
      updateAllCartItems();
    });

    // Update cart item display (visual update only)
    function updateCartItemDisplay($row) {
      const qty = parseInt($row.find('input').val());
      const price = parseFloat($row.find('.product__cart__item__text h5').text().replace('₹', ''));
      $row.find('.cart__price').text('₹' + (price * qty).toFixed(2));
      
      // Calculate and update running subtotal
      calculateCartTotal();
    }
    
    // Calculate cart total from displayed items (client-side)
    function calculateCartTotal() {
      let subtotal = 0;
      
      // Sum up all item prices
      $('tbody tr').each(function() {
        const itemTotal = parseFloat($(this).find('.cart__price').text().replace('₹', '')) || 0;
        subtotal += itemTotal;
      });
      
      // Update subtotal display
      $('.cart-subtotal').text('₹' + subtotal.toFixed(2));
      
      // Get discount if any
      let discount = 0;
      if ($('.discount-row').length > 0) {
        discount = parseFloat($('.cart-discount').text().replace('- ₹', '')) || 0;
      }
      
      // Calculate total
      const total = subtotal - discount;
      $('.cart-total').text('₹' + total.toFixed(2));
      
      // Update free delivery notification
      if (total >= 1000) {
        if ($('.alert-success').length === 0) {
          $('.cart__total ul').after('<div class="alert alert-success mt-3" role="alert">You are eligible for <strong>Free Delivery</strong>!</div>');
        }
      } else {
        $('.alert-success').remove();
      }
    }

    // Update cart summary with server data
    function updateCartSummary(cart) {
      // Update subtotal
      $('.cart-subtotal').text('₹' + cart.subtotal.toFixed(2));
      
      // Handle discount/coupon if applied
      if (cart.coupon_applied && cart.coupon_applied.discount) {
        if ($('.discount-row').length === 0) {
          // Add discount row if it doesn't exist
          $('.cart__total ul li:first').after(
            `<li class="discount-row">Discount (${cart.coupon_applied.code}) 
              <span class="cart-discount">- ₹${cart.coupon_applied.discount.toFixed(2)}</span>
            </li>`
          );
        } else {
          // Update existing discount row
          $('.discount-row').html(
            `Discount (${cart.coupon_applied.code}) 
            <span class="cart-discount">- ₹${cart.coupon_applied.discount.toFixed(2)}</span>`
          );
        }
      } else {
        // Remove discount row if no coupon
        $('.discount-row').remove();
      }
      
      // Update total
      $('.cart-total').text('₹' + cart.total.toFixed(2));
      
      // Update free delivery notification
      if (cart.total >= 1000) {
        if ($('.alert-success').length === 0) {
          $('.cart__total ul').after('<div class="alert alert-success mt-3" role="alert">You are eligible for <strong>Free Delivery</strong>!</div>');
        }
      } else {
        $('.alert-success').remove();
      }
      
      // Update checkout button
      if (cart.items && cart.items.length > 0) {
        if ($('.cart__total a.primary-btn').attr('href') !== '/checkout') {
          $('.cart__total a.primary-btn').attr('href', '/checkout').text('Proceed to checkout');
        }
      } else {
        if ($('.cart__total a.primary-btn').attr('href') !== '/shop') {
          $('.cart__total a.primary-btn').attr('href', '/shop').text('Continue shopping');
        }
      }
    }

    // Send update to server for a single item
    function updateCartItemOnServer($row, qty) {
      const variantId = $row.data('variant-id');
      showLoading();
      
      $.ajax({
        type: 'PUT',
        url: '/cart/update',
        data: JSON.stringify({ 
          items: [{ variantId, quantity: qty }] 
        }),
        contentType: 'application/json',
        success: function(response) {
          if (response.success) {
            updateCartSummary(response.cart);
            
            // Success notification
            const Toast = Swal.mixin({
              toast: true,
              position: 'top-end',
              showConfirmButton: false,
              timer: 2000,
              timerProgressBar: true
            });
            
            Toast.fire({
              icon: 'success',
              title: 'Cart updated'
            });
          }
        },
        error: function(xhr, status, error) {
          console.error('Cart update failed:', error);
          Swal.fire({
            icon: 'error',
            title: 'Update Failed',
            text: 'An error occurred while updating your cart.',
            confirmButtonColor: '#FFB22C'
          });
        }
      });
    }

    // Update all cart items at once (used by update cart button)
    function updateAllCartItems() {
      const items = [];
      $('tbody tr').each(function() {
        const variantId = $(this).data('variant-id');
        const quantity = parseInt($(this).find('input').val());
        items.push({ variantId, quantity });
      });

      showLoading();
      
      $.ajax({
        type: 'PUT',
        url: '/cart/update',
        data: JSON.stringify({ items: items }),
        contentType: 'application/json',
        success: function(response) {
          if (response.success) {
            updateCartSummary(response.cart);
            
            Swal.fire({
              icon: 'success',
              title: 'Cart Updated',
              text: 'Your cart has been updated successfully!',
              confirmButtonColor: '#FFB22C'
            });
          }
        },
        error: function(xhr, status, error) {
          console.error('Cart update failed:', error);
          Swal.fire({
            icon: 'error',
            title: 'Update Failed',
            text: 'An error occurred while updating your cart.',
            confirmButtonColor: '#FFB22C'
          });
        }
      });
    }
    
    // Initialize cart totals on page load
    calculateCartTotal();
  });

  document.addEventListener('DOMContentLoaded', function() {
    // Notification function
    function showNotification(message, type) {
      // Check if notification already exists, remove it if it does
      const existingNotification = document.querySelector('.coupon-notification');
      if (existingNotification) {
        existingNotification.remove();
      }
      
      // Create new notification
      const notification = document.createElement('div');
      notification.className = `coupon-notification ${type}`;
      notification.textContent = message;
      
      // Add to body
      document.body.appendChild(notification);
      
      // Show notification
      setTimeout(() => {
        notification.classList.add('show');
      }, 10);
      
      // Hide and remove after 3 seconds
      setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
          notification.remove();
        }, 300);
      }, 3000);
    }
  });
</script>

<%- include("../../views/partials/user/footer.ejs") %>