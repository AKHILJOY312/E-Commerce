<%- include("../../views/partials/user/header.ejs") %>

<style>
    body {
        background-color: #F7F7F7;
        color: #000000;
    }
    .checkout__title {
        color: #854836;
    }
    .site-btn {
        background-color: #FFB22C;
        color: #000000;
        border: none;
    }
    .site-btn:hover {
        background-color: #854836;
        color: #F7F7F7;
    }
    .checkout__order {
        background-color: #FFFFFF;
        border: 1px solid #FFB22C;
    }
    .error-message {
        background-color: #dc3545;
        color: #FFFFFF;
        padding: 10px;
        margin-bottom: 20px;
        border-radius: 5px;
    }
    .address-select {
        width: 100%;
        padding: 8px;
        margin-top: 10px;
        border: 1px solid #FFB22C;
        border-radius: 4px;
    }
    .wallet-balance {
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 5px;
        margin-bottom: 15px;
    }
    .payment-info {
        font-size: 14px;
        color: #6c757d;
        margin-top: 5px;
    }
    <style>
    body {
        background-color: #F7F7F7;
        color: #000000;
    }
    .checkout__title {
        color: #854836;
    }
    .site-btn {
        background-color: #FFB22C;
        color: #000000;
        border: none;
    }
    .site-btn:hover {
        background-color: #854836;
        color: #F7F7F7;
    }
    .checkout__order {
        background-color: #FFFFFF;
        border: 1px solid #FFB22C;
    }
    .error-message {
        background-color: #dc3545;
        color: #FFFFFF;
        padding: 10px;
        margin-bottom: 20px;
        border-radius: 5px;
    }
    .address-select {
        width: 100%;
        padding: 8px;
        margin-top: 10px;
        border: 1px solid #FFB22C;
        border-radius: 4px;
    }
    .wallet-balance {
        padding: 10px;
        background-color: #f8f9fa;
        border-radius: 5px;
        margin-bottom: 15px;
    }
    .payment-info {
        font-size: 14px;
        color: #6c757d;
        margin-top: 5px;
    }
    
    /* Coupon section styles */
    #coupon-code {
        width: 100%;
        height: 46px;
        border: 1px solid #ebebeb;
        padding: 0 15px;
        border-radius: 4px;
        margin-bottom: 0;
    }
    #coupon-code:focus {
        border-color: #FFB22C;
        outline: none;
    }
    #coupon-code:disabled {
        background-color: #f8f9fa;
    }
    #coupon-message {
        font-size: 14px;
        padding: 5px 0;
    }
    .checkout__order__discount {
        color: #854836;
        font-weight: 600;
    }
    /* For the coupon application success message */
    .success-message {
        background-color: #28a745;
        color: #FFFFFF;
        padding: 10px;
        margin-bottom: 20px;
        border-radius: 5px;
    }
</style>
</style>

<!-- Breadcrumb Section Begin -->
<section class="breadcrumb-option">
    <div class="container">
        <div class="row">
            <div class="col-lg-12">
                <div class="breadcrumb__text">
                    <h4>Check Out</h4>
                    <div class="breadcrumb__links">
                        <a href="/">Home</a>
                        <a href="/shop">Shop</a>
                        <span>Check Out</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<!-- Breadcrumb Section End -->

<!-- Checkout Section Begin -->
<section class="checkout spad">
    <div class="container">
        <div class="checkout__form">
            <div id="payment-status"></div>
            <% if (messages.error) { %>
                <div class="error-message"><%= messages.error %></div>
            <% } %>
            <% if (messages.success) { %>
                <div class="success-message" style="background-color: #28a745; color: #FFFFFF; padding: 10px; margin-bottom: 20px; border-radius: 5px;">
                    <%= messages.success %>
                </div>
            <% } %>
            <form id="checkout-form" action="/place-order" method="POST" onsubmit="return processPayment()">
                <div class="row">
                    <div class="col-lg-8 col-md-6">
                        <h6 class="checkout__title">Billing Details</h6>
                       
                        <% if (addresses && addresses.length > 0) { %>
                            <p>Proceed with the default address or choose a address from the drop down</p>
                            <select name="addressId" id="address-select" class="address-select" onchange="updateAddressDisplay()">
                                <% addresses.forEach((addr, index) => { %>
                                    <option value="<%= addr._id %>" <%= addr._id.toString() === (address ? address._id.toString() : '') ? 'selected' : '' %>>
                                        <%= addr.apartment %>, <%= addr.street %>, <%= addr.city %>
                                    </option>
                                <% }) %>
                            </select>
                            <div class="checkout__input" id="address-details">
                                <p>Name: <%= user.name %></p>
                                <p>Phone: <%= user.phone || 'Not provided' %></p>
                                <p>Address: <%= address.apartment %>, <%= address.building || '' %>, 
                                    <%= address.street %>, <%= address.city %>, <%= address.state %>, 
                                    <%= address.country %> - <%= address.zip_code %></p>
                            </div>
                        <% } else { %>
                            <p>No addresses found. <a href="/user/profile#Address">Add an address</a>.</p>
                        <% } %>

 <!-- Coupon Code Section -->
 <h6 class="checkout__title mt-4">Apply Coupon</h6>
 <div class="row">
     <div class="col-lg-8">
         <div class="checkout__input">
             <input type="text" id="coupon-code" name="coupon_code" placeholder="Enter coupon code"
                 <% if (cart.couponApplied) { %>
                     value="<%= cart.couponApplied.code %>" disabled
                 <% } %>
             >
         </div>
     </div>
     <div class="col-lg-4">
         <% if (cart.couponApplied) { %>
             <button type="button" class="site-btn" id="remove-coupon-btn" onclick="removeCoupon()">REMOVE COUPON</button>
         <% } else { %>
             <button type="button" class="site-btn" id="apply-coupon-btn" onclick="applyCoupon()">APPLY COUPON</button>
         <% } %>
     </div>
 </div>
 <div id="coupon-message" class="mt-2" style="display: none;"></div>



                        <h6 class="checkout__title mt-4">Order Items</h6>
                        <div class="checkout__order__products mb-3">
                            <% if (cart && cart.products && cart.products.length > 0) { %>
                                <% cart.products.forEach((item, index) => { %>
                                    <div class="row mb-3 align-items-center">
                                        <div class="col-2">
                                            <img src="<%= item.variant_id.product_image[0] || '/img/default-product.jpg' %>" 
                                                 alt="<%= item.product_id.name %>" 
                                                 style="width: 100%; max-height: 80px; object-fit: cover;">
                                        </div>
                                        <div class="col-10">
                                            <p>
                                                <%= (index + 1).toString().padStart(2, '0') %>. 
                                                <%= item.product_id.name %> (<%= item.variant_id.size %>) 
                                                - <%= item.quantity %> x ₹<%= item.variant_id.sale_price.toFixed(2) %>
                                                <span class="float-right">₹<%= (item.variant_id.sale_price * item.quantity).toFixed(2) %></span>
                                            </p>
                                            <% if (item.variant_id.quantity < item.quantity) { %>
                                                <p style="color: #dc3545;">Insufficient stock (Available: <%= item.variant_id.quantity %>)</p>
                                            <% } %>
                                        </div>
                                    </div>
                                <% }) %>
                            <% } else { %>
                                <p>Your cart is empty.</p>
                            <% } %>
                        </div>

                        <% 
                            const deliveryDate = new Date();
                            deliveryDate.setDate(deliveryDate.getDate() + 7);
                            const formattedDate = deliveryDate.toLocaleDateString('en-US', {
                                weekday: 'long',
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric'
                            });
                        %>
                        <div class="checkout__input mt-4">
                            <p>Estimated Delivery Date: <strong><%= formattedDate %></strong></p>
                        </div>
                    </div>

                    <div class="col-lg-4 col-md-6">
                        <div class="checkout__order">
                            <h4 class="order__title">Order Summary</h4>
                            <div class="checkout__order__products">Product <span>Total</span></div>
                            <ul class="checkout__total__products">
                                <% if (cart && cart.products) { %>
                                    <% cart.products.forEach((item, index) => { %>
                                        <li>
                                            <%= (index + 1).toString().padStart(2, '0') %>. 
                                            <%= item.product_id.name %> (<%= item.variant_id.size %>)
                                            <span>₹<%= (item.variant_id.sale_price * item.quantity).toFixed(2) %></span>
                                        </li>
                                    <% }) %>
                                <% } %>
                            </ul>
                            <ul class="checkout__total__all">
                                <li>Subtotal <span>₹<%= (cart && cart.subtotal) ? cart.subtotal.toFixed(2) : '0.00' %></span></li>
                                <li> <% if (cart.couponApplied) { %>
                                    <div class="checkout__order__discount">
                                      Discount (<%= cart.couponApplied.code %>) <span>-₹<%= cart.discount.toFixed(2) %></span>
                                    </div>
                                  <% } %></li>
                                <li>Shipping <span><%= (cart && cart.shippingCost !== undefined) ? (cart.shippingCost === 0 ? 'Free' : '₹' + cart.shippingCost.toFixed(2)) : 'Free' %></span></li>
                                <li>Total <span>₹<%= (cart && cart.total) ? cart.total.toFixed(2) : '0.00' %></span></li>
                            </ul>
                            
                            <% if (user && user.wallet !== undefined) { %>
                            <div class="wallet-balance">
                                <p>Wallet Balance: <strong>₹<%= user.wallet.toFixed(2) %></strong></p>
                            </div>
                            <% } %>
                            
                            <div class="checkout__input__radio">
                                <label for="check">
                                    Wallet
                                    <input type="radio" id="check" name="payment_method" value="wallet" onchange="checkWalletBalance()">
                                    <span class="checkmark"></span>
                                </label>
                                <div id="wallet-info" class="payment-info" style="display: none;">
                                    <% if (user && user.wallet !== undefined && cart && cart.total) { %>
                                        <% if (user.wallet >= cart.total) { %>
                                            <span style="color: #28a745;">Sufficient balance available</span>
                                        <% } else { %>
                                            <span style="color: #dc3545;">Insufficient balance (₹<%= user.wallet.toFixed(2) %> available)</span>
                                        <% } %>
                                    <% } %>
                                </div>
                            </div>
                            <div class="checkout__input__radio">
                                <label for="razorpay">
                                    Razorpay
                                    <input type="radio" id="razorpay" name="payment_method" value="razorpay">
                                    <span class="checkmark"></span>
                                </label>
                                <div id="razorpay-info" class="payment-info" style="display: none;">
                                    Online payment via credit/debit card, UPI, net banking, etc.
                                </div>
                            </div>
                            <div class="checkout__input__radio">
                                <label for="cod">
                                    Cash on Delivery
                                    <input type="radio" id="cod" name="payment_method" value="cod">
                                    <span class="checkmark"></span>
                                </label>
                                <div id="cod-info" class="payment-info" style="display: none;">
                                    Pay with cash upon delivery
                                </div>
                            </div>
                            <div id="payment-error" style="color: #854836; display: none;">
                                Please select a payment method
                            </div>
                            <input type="hidden" name="razorpay_payment_id" id="razorpay_payment_id">
                            <input type="hidden" name="razorpay_order_id" id="razorpay_order_id">
                            <input type="hidden" name="razorpay_signature" id="razorpay_signature">
                            <button type="submit" class="site-btn">PLACE ORDER</button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</section>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    // Show/hide payment info based on selection
    document.querySelectorAll('input[name="payment_method"]').forEach(radio => {
        radio.addEventListener('change', function() {
            // Hide all info divs
            document.querySelectorAll('.payment-info').forEach(div => {
                div.style.display = 'none';
            });
            
            // Show the selected payment method info
            const infoDiv = document.getElementById(`${this.value}-info`);
            if (infoDiv) {
                infoDiv.style.display = 'block';
            }
        });
    });

    function checkWalletBalance() {
        const walletInfo = document.getElementById('wallet-info');
        if (walletInfo) {
            walletInfo.style.display = 'block';
        }
    }

    function validatePaymentMethod() {
        const paymentMethods = document.getElementsByName('payment_method');
        const errorDiv = document.getElementById('payment-error');
        let isSelected = false;

        for (let method of paymentMethods) {
            if (method.checked) {
                isSelected = true;
                break;
            }
        }

        if (!isSelected) {
            errorDiv.style.display = 'block';
            return false;
        }
        
        errorDiv.style.display = 'none';
        return true;
    }

    function processPayment() {

        const addressSelect = document.getElementById('address-select');
    if (!addressSelect || addressSelect.value === '') {
        // Display error message
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error-message';
        errorDiv.textContent = 'Please add or select an address to continue';
        
        // Insert error message before the checkout form
        const checkoutForm = document.getElementById('checkout-form');
        checkoutForm.parentNode.insertBefore(errorDiv, checkoutForm);
        
        // Scroll to error message
        errorDiv.scrollIntoView({behavior: 'smooth'});
        return false;
    }

        if (!validatePaymentMethod()) {
            return false;
        }

        const paymentMethod = document.querySelector('input[name="payment_method"]:checked').value;
        
        // For wallet payment
        if (paymentMethod === 'wallet') {
            <% if (user && user.wallet !== undefined && cart && cart.total) { %>
                <% if (user.wallet < cart.total) { %>
                    Swal.fire({
                icon: 'error',
                title: 'Insufficient Balance',
                text: 'Your wallet balance is not enough to complete this purchase. Please choose another payment method.',
            });
                    return false;
                <% } %>
            <% } %>
            return true; // Continue with form submission for wallet payment
        }
        
        // For Razorpay payment
        if (paymentMethod === 'razorpay') {
            initRazorpay();
            return false; // Prevent form submission as we'll handle it via Razorpay
        }
        
        // For COD, just submit the form
        if (paymentMethod === 'cod') {
            <% if (1000 < cart.total) { %>
                Swal.fire({
            icon: 'warning',
            title: 'COD Not Available',
            text: 'Cash on Delivery is not available for orders less than ₹1000. Please choose a different payment method.',
        });
                    return false;
                <% } %>
            return true;
        }
        
        return true;
    }

    function initRazorpay() {
    // Create a form data object to send to the server
    const amount = <%= (cart && cart.total) ? cart.total : 0 %>;
    
    // Send a request to create a Razorpay order
    fetch('/payment/create-order', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            user_id: '<%= user._id %>',
            amount: amount
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success && data.order) {
            // Store the order ID in a variable for later use
            const razorpayOrderId = data.order.id;
            
            // Configure Razorpay options
            const options = {
                key: '<%= process.env.RAZORPAY_KEY_ID %>',
                amount: data.order.amount,
                currency: data.order.currency,
                name: 'Solo Fashion',
                description: 'Purchase Payment',
                order_id: razorpayOrderId,
                handler: function (response) {
                    
                    // Store Razorpay payment details in hidden fields
                    document.getElementById('razorpay_payment_id').value = response.razorpay_payment_id;
                    document.getElementById('razorpay_order_id').value = razorpayOrderId;
                    document.getElementById('razorpay_signature').value = response.razorpay_signature;
                    
                    // Submit the form to complete the order
                    document.getElementById('checkout-form').submit();
                },
                // NEW: Payment failure handler
                "modal": {
                    "ondismiss": function() {
                        document.getElementById('payment-status').innerHTML = 
                            '<div class="alert alert-warning">Payment cancelled. Please try again.</div>';
                    }
                },
                prefill: {
                    name: '<%= user.name %>',
                    email: '<%= user.email %>',
                    contact: '<%= user.phone || "" %>'
                },
                theme: {
                    color: '#FFB22C'
                }
            };
            
            const rzp = new Razorpay(options);
            
            // NEW: Add event listeners for payment failures
            rzp.on('payment.failed', function (response) {
                console.error('Payment failed:', response.error);
                
                // Log payment failure details
                const failureDetails = {
                    order_id: razorpayOrderId,
                    payment_id: response.error.metadata.payment_id,
                    error_code: response.error.code,
                    error_description: response.error.description,
                    error_source: response.error.source,
                    error_step: response.error.step,
                    error_reason: response.error.reason
                };
                
                // Display user-friendly error message
                document.getElementById('payment-status').innerHTML = 
                    `<div class="alert alert-danger">
                        Payment failed: ${response.error.description}. 
                        Please try again or use a different payment method.
                    </div>`;
                
                // Send failure details to server for logging
                fetch('/payment/log-failure', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(failureDetails)
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Failure logged:', data);
                })
                .catch(error => {
                    console.error('Error logging failure:', error);
                });
            });
            
            rzp.open();
        } else {
            alert('Failed to create payment order. Please try again.');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Something went wrong. Please try again later.');
    });
}

    function updateAddressDisplay() {
        const select = document.getElementById('address-select');
        const addressId = select.value;
        const addresses = <%- JSON.stringify(addresses) %>;
        const selectedAddress = addresses.find(addr => addr._id === addressId);
        
        if (selectedAddress) {
            const detailsDiv = document.getElementById('address-details');
            detailsDiv.innerHTML = `
                <p>Name: <%= user.name %></p>
                <p>Phone: <%= user.phone || 'Not provided' %></p>
                <p>Address: ${selectedAddress.apartment}, ${selectedAddress.building || ''}, 
                    ${selectedAddress.street}, ${selectedAddress.city}, ${selectedAddress.state}, 
                    ${selectedAddress.country} - ${selectedAddress.zip_code}</p>
            `;
        }
    }

        // Coupon related functions
        function applyCoupon() {
        const couponCode = document.getElementById('coupon-code').value.trim();
        const messageDiv = document.getElementById('coupon-message');
        
        if (!couponCode) {
            showCouponMessage('Please enter a coupon code.', 'error');
            return;
        }
        
        // Send request to apply coupon
        fetch('/cart/apply-coupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ 
                coupon_code: couponCode
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showCouponMessage(data.message || 'Coupon applied successfully!', 'success');
                
                // Disable input and change button to "Remove Coupon"
                document.getElementById('coupon-code').disabled = true;
                
                const applyBtn = document.getElementById('apply-coupon-btn');
                applyBtn.textContent = 'REMOVE COUPON';
                applyBtn.id = 'remove-coupon-btn';
                applyBtn.onclick = removeCoupon;
                
                // Reload page to update totals
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            } else {
                showCouponMessage(data.message || 'Invalid coupon code.', 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showCouponMessage('Something went wrong. Please try again.', 'error');
        });
    }

    function removeCoupon() {
        // Send request to remove coupon
        fetch('/cart/remove-coupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showCouponMessage(data.message || 'Coupon removed successfully!', 'success');
                
                // Enable input and change button back to "Apply Coupon"
                document.getElementById('coupon-code').disabled = false;
                document.getElementById('coupon-code').value = '';
                
                const removeBtn = document.getElementById('remove-coupon-btn');
                removeBtn.textContent = 'APPLY COUPON';
                removeBtn.id = 'apply-coupon-btn';
                removeBtn.onclick = applyCoupon;
                
                // Reload page to update totals
                setTimeout(() => {
                    window.location.reload();
                }, 1000);
            } else {
                showCouponMessage(data.message || 'Could not remove coupon.', 'error');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showCouponMessage('Something went wrong. Please try again.', 'error');
        });
    }

    function showCouponMessage(message, type) {
        const messageDiv = document.getElementById('coupon-message');
        messageDiv.textContent = message;
        messageDiv.style.display = 'block';
        
        if (type === 'success') {
            messageDiv.style.color = '#28a745';
        } else {
            messageDiv.style.color = '#dc3545';
        }
        
        // Hide message after 5 seconds
        setTimeout(() => {
            messageDiv.style.display = 'none';
        }, 5000);
    }
</script>

<%- include("../../views/partials/user/footer.ejs") %>